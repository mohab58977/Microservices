name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'main'
        type: string
  # pull_request:
  #   branches: [main, master]
  #   paths-ignore:
  #     - 'helm/node-hello/values.yaml'
  #     - '**.md'
  #     - 'images/'

permissions:
  id-token: write   # Required for OIDC
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      image-tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate version tag
        id: version
        run: |
          # Generate version based on timestamp and short SHA for uniqueness
          TIMESTAMP=$(date -u +%Y.%m.%d-%H%M%S)
          SHORT_SHA=${GITHUB_SHA::7}
          VERSION="${TIMESTAMP}-${SHORT_SHA}"
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.version.outputs.tag }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-kubernetes:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group rg-microservices \
            --name aks-microservices \
            --overwrite-existing

      - name: Update deployment image
        run: |
          NEW_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${NEW_TAG}"
          
          echo "Updating deployment with image: ${IMAGE}"
          
          # Update the image in deployment.yaml
          sed -i "s|image: ghcr.io/.*|image: ${IMAGE}|g" k8s/deployment.yaml
          
          # Verify the change
          echo "Updated deployment.yaml:"
          grep -A 2 "image:" k8s/deployment.yaml

      - name: Deploy to Kubernetes
        run: |
          # Create namespace if it doesn't exist
          kubectl apply -f k8s/namespace.yaml
          
          # Apply all manifests
          kubectl apply -f k8s/deployment.yaml -n microservices
          kubectl apply -f k8s/service.yaml -n microservices
          
          # Wait for rollout to complete
          kubectl rollout status deployment/microservices-app -n microservices --timeout=1m
          
          # Get deployment status
          echo "Deployment status:"
          kubectl get pods -n microservices -l app=microservices-app
          kubectl get svc -n microservices microservices-app

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  cleanup-old-images:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old Docker images
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "Starting cleanup of old Docker images..."
          echo "Repository: ${{ github.repository }}"

          # Get all package versions (excluding 'latest' tag)
          PACKAGE_VERSIONS=$(curl -s \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/users/$REPO_OWNER/packages/container/$REPO_NAME/versions" \
            | jq -r '[.[] | select(.metadata.container.tags[]? != "latest")] | sort_by(.created_at) | reverse | .[5:] | .[].id')

          if [ -z "$PACKAGE_VERSIONS" ]; then
            echo "No old versions to clean up (less than 6 versions exist, or all are 'latest')"
            exit 0
          fi

          echo "Found versions to delete:"
          echo "$PACKAGE_VERSIONS"

          # Delete old versions
          echo "$PACKAGE_VERSIONS" | while read -r VERSION_ID; do
            if [ ! -z "$VERSION_ID" ]; then
              echo "Deleting version ID: $VERSION_ID"
              curl -s -X DELETE \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/users/$REPO_OWNER/packages/container/$REPO_NAME/versions/$VERSION_ID" \
                && echo "✓ Deleted version $VERSION_ID" \
                || echo "✗ Failed to delete version $VERSION_ID"
            fi
          done

          echo "Cleanup completed!"